import icons from 'url:../../img/icons.svg'; // parcel 2

export default class View {
  //? –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞ / –¥–∞–Ω–Ω—ã—Ö
  _data;

  //* JSDOCS - –∫–æ–º–º–µ–Ω–∏—Ç—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
  /**
   * –†–µ–Ω–¥–µ—Ä–∏—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ DOM
   * @param {Object | Object[]} data // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞
   * @param {boolean} [render=true] // –ï—Å–ª–∏ –ª–æ–∂–Ω–æ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É html –≤–º–µ—Å—Ç–æ —Ä–µ–Ω–¥–µ—Ä–∞ –≤ DOM
   * @returns {undefined | string} Html –≤–æ–∑–≤—Ä–∞—â–µ–Ω –µ—Å–ª–∏ render = false
   * @this {Object} View instance
   */
  //todo –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ controller –æ—Ç model - model.state.recipe
  render(data, render = true) {
    //* –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫—É
    if (!data || (Array.isArray(data) && data.length === 0))
      return this.renderError();

    //* –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    this._data = data;

    //* –ø–æ–ª—É—á–∞–µ–º html
    const markup = this._generateMarkup();

    if (!render) return markup;

    //* –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º markup
    this._clear();

    if (!markup) return;

    this._parentEl.insertAdjacentHTML('beforeend', markup);
  }

  //todo –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ controller –æ—Ç model - model.state.recipe –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –∞—Ç—Ä–∏–±—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
  update(data) {
    //* –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    this._data = data;

    //* –ø–æ–ª—É—á–∞–µ–º html
    const newMarkup = this._generateMarkup();

    //* –º–µ–Ω—è–µ–º markup —Å—Ç—Ä–æ–∫—É –≤ DOM –æ–±—ä–µ–∫—Ç –Ω–æ –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const newDOM = document.createRange().createContextualFragment(newMarkup);

    //* –≤—Å–µ –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ DOM
    const newElements = Array.from(newDOM.querySelectorAll('*'));
    // console.log('newElements: ', newElements);

    //* —Ç–µ–∫—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const curElements = Array.from(this._parentEl.querySelectorAll('*'));
    // console.log('curElements: ', curElements);

    //* —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º 2 –º–∞—Å—Å–∏–≤–∞
    newElements.forEach((newEl, i) => {
      const curEl = curElements[i];

      //* –ø—Ä–æ–≤–µ—Ä—è–µ–º - –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–∏—Ö —É–∑–ª–æ–≤?
      // console.log(curEl, newEl.isEqualNode(curEl));

      //* –≥–¥–µ DOM –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø–æ–º–µ–Ω—è—Ç—å—Å—è –ò —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∑–ª–∞ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç - —Ç–∞–º –º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç

      //! –≤–∞–∂–Ω–æ nodeValue –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —É–∑–µ–ª —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ null)
      if (
        !newEl.isEqualNode(curEl) &&
        newEl?.firstChild?.nodeValue.trim() !== ''
      ) {
        /* console.log(
          'newEl.firstChild.nodeValue.trim(): üí£',
          newEl.firstChild.nodeValue.trim()
        ); */
        curEl.textContent = newEl?.firstChild?.nodeValue.trim();
      }

      //* –º–µ–Ω—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ
      if (!newEl.isEqualNode(curEl)) {
        /* console.log(
          'Array.from(newEl.attributes): ',
          Array.from(newEl.attributes)
        ); */
        Array.from(newEl.attributes).forEach((attr) =>
          curEl.setAttribute(attr.name, attr.value)
        );
      }
    });

    //* –∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π DOM –Ω–∞ –Ω–æ–≤—ã–π
  }

  //todo –æ—á–∏—â–∞–µ–º parentEl
  _clear() {
    this._parentEl.innerHTML = '';
  }

  renderError(message = this._errorMessage) {
    const markup = `
        <div class="error">
          <div>
            <svg>
              <use href="${icons}#icon-alert-triangle"></use>
            </svg>
          </div>
          <p>${message}</p>
        </div>
    `;
    this._clear();
    this._parentEl.insertAdjacentHTML('afterbegin', markup);
  }

  renderMessage(message = this._defaultMessage) {
    const markup = `
      <div class="message">
        <div>
          <svg>
            <use href="${icons}#icon-smile"></use>
          </svg>
        </div>
        <p>${message}</p>
      </div>
    `;
    this._clear();
    this._parentEl.insertAdjacentHTML('afterbegin', markup);
  }

  //todo —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏–Ω–Ω–µ—Ä
  renderSpinner() {
    const markup = `
      <div class="spinner">
        <svg>
          <use href="${icons}#icon-loader"></use>
        </svg>
      </div>
    `;
    this._clear();
    this._parentEl.insertAdjacentHTML('afterbegin', markup);
  }
}
