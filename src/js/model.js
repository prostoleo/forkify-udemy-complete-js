//* –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
import { API_URL, API_KEY, RES_PER_PAGE } from './config.js';

//* –¥–ª—è —Ä–∞–±–æ—Ç—ã async —Ñ—É–Ω–∫—Ü–∏–π
import { async } from 'regenerator-runtime';

//* –∏–∑ helpers
// import { getJSON, sendJSON } from './helpers.js';
import { AJAX } from './helpers.js';

export const state = {
  recipe: {},
  search: {
    query: '',
    results: [],
    page: 1,
    resultsPerPage: RES_PER_PAGE,
  },
  // page: 1,
  bookmarks: [],
};

//todo —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ä–µ—Ü–µ–ø—Ç–∞
function createRecipeObject(data) {
  const { recipe } = data.data;

  return {
    id: recipe.id,
    title: recipe.title,
    publisher: recipe.publisher,
    sourceUrl: recipe.source_url,
    image: recipe.image_url,
    servings: recipe.servings,
    cookingTime: recipe.cooking_time,
    ingredients: recipe.ingredients,
    //* —Å–æ–∑–¥–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–æ key –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    ...(recipe.key && { key: recipe.key }),
  };
}

//todo –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞ - –±–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export async function loadRecipe(id) {
  try {
    const data = await AJAX(`${API_URL}/${id}?key=${API_KEY}`);

    console.log('data: ', data);

    state.recipe = createRecipeObject(data);

    //* –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ—Ü–µ–ø—Ç —Ä–∞–≤–µ–Ω –∫–∞–∫–æ–º—É-—Ç–æ —Ä–µ—Ü–µ–ø—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∞—Ö - —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∑–∞–∫–ª–∞–¥–∫–∏
    if (state.bookmarks.some((b) => b.id === id)) {
      state.recipe.bookmarked = true;
    } else {
      state.recipe.bookmarked = false;
    }

    console.log('state.recipe: ', state.recipe);

    // –ª–æ–≤–∏–º –æ—à–∏–±–∫—É
  } catch (error) {
    console.error(`üí£üí£üí£ ${error}`);

    throw error;
  }
}

//todo —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
export async function loadSearchResults(query) {
  try {
    const { data } = await AJAX(`${API_URL}?search=${query}&key=${API_KEY}`);
    console.log('data: ', data);

    //* –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≤ –º–∞—Å—Å–∏–≤ search
    state.search.results = data.recipes.map((rec) => {
      //* —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —á—Ç–æ–±—ã –≤—ã–≥–ª—è–¥–µ–ª –∫–∞–∫ –Ω—É–∂–Ω–æ
      return {
        id: rec.id,
        image: rec.image_url,
        publisher: rec.publisher,
        title: rec.title,
        //* —Å–æ–∑–¥–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–æ key –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        ...(rec.key && { key: rec.key }),
      };
    });

    // state.search = [data.recipes];
    // console.log('state.search.results: ', state.search.results);

    //* —á—Ç–æ–±—ã –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–∏—Å–∫–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å —Å–Ω–∞—á–∞–ª–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    state.search.page = 1;
  } catch (error) {
    console.error(`üí£üí£üí£ ${error}`);

    throw error;
  }
}

//todo —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∑–ª—å—Ç–∞—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
export function getSearchResultsPage(page = state.search.page) {
  // console.log('page: ', page);
  //* —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  state.search.page = page;

  const start = (page - 1) * state.search.resultsPerPage;
  const end = page * state.search.resultsPerPage;

  //* –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  return state.search.results.slice(start, end);
}

//* –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª-–≤–æ —Å–µ—Ä–≤–∏—Ä–æ–≤–∫–∏
export async function updateServings(newServings) {
  state.recipe.ingredients.forEach((ing) => {
    ing.quantity = (ing.quantity * newServings) / state.recipe.servings;
  });

  state.recipe.servings = newServings;
}

//todo –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–ª–∞–¥–∫–∏ –≤ localStorage
function persistBookmarks() {
  localStorage.setItem('bookmarks-forkify', JSON.stringify(state.bookmarks));
}

//todo –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏
export function addBookmark(recipe) {
  //* –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏
  state.bookmarks.push(recipe);

  //* –æ—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–∫—â–∏–π —Ä–µ—Ü–µ–ø—Ç –∫–∞–∫ –∑–∞–∫–ª–∞–¥–∫—É –µ—Å–ª–∏ –æ–Ω –æ–¥–∏–Ω–∞–∫–æ–≤ —Å –ø–æ–ª—É—á–∞–µ–º—ã–º
  if (recipe.id === state.recipe.id) {
    state.recipe.bookmarked = true;
  }

  //* —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–ª–∞–¥–∫–∏
  persistBookmarks();
}

//todo —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏
export function deleteBookmark(recipe) {
  //* —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏ –º–æ–π –º–µ—Ç–æ–¥
  state.bookmarks = state.bookmarks.filter(
    (bookmark) => bookmark.id !== recipe.id
  );

  // —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏
  /* const index = state.bookmarks.findIndex(
    (bookmark) => bookmark.id === recipe.id
  );
  state.bookmarks.splice(index, 1); */

  //* –æ—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ—Ü–µ–ø—Ç –∫–∞–∫ –ù–ï –∑–∞–∫–ª–∞–¥–∫—É –µ—Å–ª–∏ –æ–Ω –æ–¥–∏–Ω–∞–∫–æ–≤ —Å –ø–æ–ª—É—á–∞–µ–º—ã–º
  if (recipe.id === state.recipe.id) {
    state.recipe.bookmarked = false;
  }

  //* —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–ª–∞–¥–∫–∏
  persistBookmarks();
}

//todo –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function init() {
  //* –¥–æ—Å—Ç–∞–µ–º –∏–∑ localStorage
  const storage = localStorage.getItem('bookmarks-forkify');

  //* –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å - –∑–∞–∫–∏–¥—ã–≤–∞–µ–º –≤ state
  if (storage) state.bookmarks = JSON.parse(storage);
}

init();
console.log('state.bookmarks: ', state.bookmarks);

function clearBookmarks() {
  localStorage.clear('bookmarks-forkify');
}

// clearBookmarks();

//====================================================
//TODO –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–∞
export async function uploadRecipe(newRecipe) {
  try {
    // console.log('Object.entries(newRecipe): ', Object.entries(newRecipe));

    //* –¥–µ–ª–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ - –º–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    /* const ingredients = Object.entries(newRecipe)
    .filter((entry) => entry[0].startsWith('ingredient') && entry[1] !== '')
    .map((entry) => entry.slice(1))
    .map((entry) => {
      console.log('entry: ', entry, typeof entry);
      let str = entry + '';
      console.log('str: ', str);
      console.log('str.split(', '): ', str.split(','));
      // entry.split(',');
      // return entry;
      str = str.split(',');

      return {
        quantity: str[0] ? +str[0] : null,
        unit: str[1] ? str[1] : '',
        description: str[2],
      };
    }); */

    //* —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    const ingredients = Object.entries(newRecipe)
      .filter((entry) => entry[0].startsWith('ingredient') && entry[1] !== '')
      .map((ing) => {
        //* desctructure
        const ingArr = ing[1].split(',').map((el) => el.trim());

        //* –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if (ingArr.length !== 3)
          throw new Error(
            'Wrong ingredient format! Please use the correct format'
          );

        const [quantity, unit, description] = ingArr;

        return {
          quantity: quantity ? +quantity : null,
          unit: unit ? unit : '',
          description,
        };
      });

    console.log('ingredients: ', ingredients);

    //* —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const recipe = {
      title: newRecipe.title,
      publisher: newRecipe.publisher,
      source_url: newRecipe.sourceUrl,
      image_url: newRecipe.image,
      servings: +newRecipe.servings,
      cooking_time: +newRecipe.cookingTime,
      ingredients,
    };
    console.log('recipe: ', recipe);

    //* –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –æ—Ç API
    const data = await AJAX(`${API_URL}?key=${API_KEY}`, recipe);
    console.log('data: ', data);

    //* –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–∏–π —Ä–µ—Ü–µ–ø—Ç

    state.recipe = createRecipeObject(data);

    //* –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç –≤ –∑–∞–∫–ª–∞–¥–∫–∏
    addBookmark(state.recipe);
  } catch (err) {
    throw err;
  }
}
